#summary Describes the process manager contained in the ulrice-core project

= Introduction =

The main task of the process manager is the management of background tasks started within 
the modules. It controls the lifecycle of the processes and notifies listener about 
changed state or progress of the background processes

The process manager can be obtained by calling 
{{{
  Ulrice.getProcessManager();
}}}

= How To =

== How to implement a process ==
Every process that should be controlled by the ulrice process manager has to implement 
the IFBackgroundProcess-Interface. This interface extends the Java-Runnable interface.

There is an abstract default implementation called AbstractProcess using the SwingWorker-Class from Java

You need to implement the following methods to use the AbstractProcess for background processes:
{{{
	/**
	 * This method is executed in background. 
	 * 
	 * @return The result of the background process
	 */
	protected abstract T work();

	/**
	 * Called in the awt-thread after the background process was finished.
	 * 
	 * @param result The result of the background process
	 */
	protected abstract void finished(T result);
}}}

To update the progress of the background process you have to inform all the registered listeners by calling 
{{{
	/**
	 * Called, if the progress of the process changed.
	 * 
	 * @param process The process.
	 */
	public void progressChanged(IFBackgroundProcess process);}}}

If you use the abstract implementation of the background process all you have to do is to call fireProgressChanged-method.

== How to start a process ==  

To start a process from a controller you have to register the process at the process manager and than execute the process.
For convenience you can use the CtrlProcessExecutor class.

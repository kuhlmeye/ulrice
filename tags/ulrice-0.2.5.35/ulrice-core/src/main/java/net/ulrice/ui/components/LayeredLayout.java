package net.ulrice.ui.components;import java.awt.Component;import java.awt.Container;import java.awt.Dimension;import java.awt.Insets;import java.awt.LayoutManager2;import java.awt.Rectangle;import java.util.LinkedList;import java.util.List;public class LayeredLayout implements LayoutManager2{    private final List<Component> components = new LinkedList<Component>();    /**     * {@inheritDoc}     */    @Override    public void addLayoutComponent(Component comp, Object constraints)    {        synchronized (comp.getTreeLock())        {            components.add(comp);        }    }    /**     * {@inheritDoc}     */    @Override    public void addLayoutComponent(String name, Component comp)    {        addLayoutComponent(comp, null);    }    /**     * {@inheritDoc}     */    @Override    public void removeLayoutComponent(Component comp)    {        synchronized (comp.getTreeLock())        {            components.remove(comp);        }    }    /**     * {@inheritDoc}     */    @Override    public float getLayoutAlignmentX(Container target)    {        return 0.5f;    }    /**     * {@inheritDoc}     */    @Override    public float getLayoutAlignmentY(Container target)    {        return 0.5f;    }    /**     * {@inheritDoc}     */    @Override    public void invalidateLayout(Container target)    {        // intentionally left blank    }    /**     * {@inheritDoc}     */    @Override    public Dimension preferredLayoutSize(Container parent)    {        synchronized (parent.getTreeLock())        {            int width = 0;            int height = 0;            for (Component comp : components)            {                Dimension size = comp.getPreferredSize();                width = Math.max(size.width, width);                height = Math.max(size.height, height);            }            Insets insets = parent.getInsets();            width += insets.left + insets.right;            height += insets.top + insets.bottom;            return new Dimension(width, height);        }    }    /**     * {@inheritDoc}     */    @Override    public Dimension minimumLayoutSize(Container parent)    {        synchronized (parent.getTreeLock())        {            int width = 0;            int height = 0;            for (Component comp : components)            {                Dimension size = comp.getMinimumSize();                width = Math.max(size.width, width);                height = Math.max(size.height, height);            }            Insets insets = parent.getInsets();            width += insets.left + insets.right;            height += insets.top + insets.bottom;            return new Dimension(width, height);        }    }    /**     * {@inheritDoc}     */    @Override    public Dimension maximumLayoutSize(Container target)    {        return new Dimension(Integer.MAX_VALUE, Integer.MAX_VALUE);    }    /**     * {@inheritDoc}     */    @Override    public void layoutContainer(Container parent)    {        synchronized (parent.getTreeLock())        {            int width = parent.getWidth();            int height = parent.getHeight();            Rectangle bounds = new Rectangle(0, 0, width, height);            int componentsCount = components.size();            for (int i = 0; i < componentsCount; i++)            {                Component comp = components.get(i);                comp.setBounds(bounds);                parent.setComponentZOrder(comp, componentsCount - i - 1);            }        }    }}